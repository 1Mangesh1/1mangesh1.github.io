---
// NASA Earth Imagery component
---

<div class="nasa-earth-container">
  <div class="bg-gradient-to-r from-green-50 to-teal-50 dark:from-green-900/20 dark:to-teal-900/20 rounded-lg p-6 border border-green-200 dark:border-green-800">
    <h3 class="font-semibold text-lg mb-4 text-green-900 dark:text-green-100 flex items-center">
      <span class="mr-2">üåç</span>
      Earth from Space
    </h3>
    
    <div class="mb-4 space-y-3">
      <div class="grid grid-cols-2 gap-2">
        <input 
          type="number" 
          id="latitude" 
          placeholder="Latitude" 
          step="0.000001"
          class="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 text-sm"
        />
        <input 
          type="number" 
          id="longitude" 
          placeholder="Longitude" 
          step="0.000001"
          class="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 text-sm"
        />
      </div>
      
      <div class="flex gap-2">
        <button 
          id="fetch-earth-btn" 
          class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white text-sm rounded-md transition-colors duration-200 flex-1"
        >
          üì° Get Satellite View
        </button>
        <button 
          id="random-location-btn" 
          class="px-3 py-2 bg-gray-600 hover:bg-gray-700 text-white text-sm rounded-md transition-colors duration-200"
        >
          üé≤ Random
        </button>
      </div>
      
      <div class="text-xs text-gray-600 dark:text-gray-400">
        Examples: New York (40.7128, -74.0060) ‚Ä¢ London (51.5074, -0.1278) ‚Ä¢ Tokyo (35.6762, 139.6503)
      </div>
    </div>
    
    <div id="earth-content" class="space-y-4">
      <div class="text-center py-8">
        <div class="text-4xl mb-2">üåç</div>
        <p class="text-gray-600 dark:text-gray-400">Enter coordinates to see Earth from space!</p>
      </div>
    </div>
  </div>
</div>

<script>
  // Famous locations for random selection
  
  // Famous locations for random selection
  const famousLocations = [
    { name: "Grand Canyon", lat: 36.0986, lon: -112.0978 },
    { name: "Mount Everest", lat: 27.9881, lon: 86.9250 },
    { name: "New York City", lat: 40.7128, lon: -74.0060 },
    { name: "London", lat: 51.5074, lon: -0.1278 },
    { name: "Tokyo", lat: 35.6762, lon: 139.6503 },
    { name: "Sydney Opera House", lat: -33.8568, lon: 151.2153 },
    { name: "Sahara Desert", lat: 23.8061, lon: 11.2888 },
    { name: "Amazon Rainforest", lat: -3.4653, lon: -62.2159 },
    { name: "Niagara Falls", lat: 43.0799, lon: -79.0747 },
    { name: "Las Vegas", lat: 36.1699, lon: -115.1398 }
  ];
  
  function getLocationInfo(lat, lon) {
    // Determine location characteristics based on coordinates
    const absLat = Math.abs(lat);
    const absLon = Math.abs(lon);
    
    // Check for specific famous locations first
    for (const location of famousLocations) {
      const latDiff = Math.abs(lat - location.lat);
      const lonDiff = Math.abs(lon - location.lon);
      if (latDiff < 0.1 && lonDiff < 0.1) {
        return {
          name: location.name,
          region: getRegionName(lat, lon),
          features: getFeaturesForLocation(location.name),
          climate: getClimateInfo(lat)
        };
      }
    }
    
    // Generate generic location info
    return {
      name: getGenericLocationName(lat, lon),
      region: getRegionName(lat, lon),
      features: getGenericFeatures(lat, lon),
      climate: getClimateInfo(lat)
    };
  }
  
  function getRegionName(lat, lon) {
    if (lat > 60) return "Arctic Region";
    if (lat < -60) return "Antarctic Region";
    if (lat > 23.5) return "Northern Temperate Zone";
    if (lat < -23.5) return "Southern Temperate Zone";
    return "Tropical Zone";
  }
  
  function getGenericLocationName(lat, lon) {
    const hemisphere = lat >= 0 ? "Northern" : "Southern";
    const longitude = lon >= 0 ? "Eastern" : "Western";
    return `${hemisphere} ${longitude} Region`;
  }
  
  function getFeaturesForLocation(name) {
    const features = {
      "Grand Canyon": "Deep canyon formations, layered rock structures, Colorado River",
      "Mount Everest": "High altitude peaks, snow coverage, glacial formations",
      "New York City": "Urban development, skyscrapers, harbor areas",
      "London": "Dense urban area, Thames River, historic architecture",
      "Tokyo": "Mega-city development, bay area, high-density population",
      "Sydney Opera House": "Coastal city, harbor bridge, urban waterfront",
      "Sahara Desert": "Sand dunes, arid landscape, minimal vegetation",
      "Amazon Rainforest": "Dense forest canopy, river networks, biodiversity",
      "Niagara Falls": "Waterfalls, river systems, mist formations",
      "Las Vegas": "Desert city, urban development in arid region"
    };
    return features[name] || "Varied topographical features, natural landscape";
  }
  
  function getGenericFeatures(lat, lon) {
    const absLat = Math.abs(lat);
    if (absLat > 60) return "Ice sheets, polar landscape, minimal vegetation";
    if (absLat > 45) return "Forests, mountains, seasonal variations";
    if (absLat > 23.5) return "Mixed terrain, agricultural areas, urban development";
    return "Tropical vegetation, warm climate features";
  }
  
  function getClimateInfo(lat) {
    const absLat = Math.abs(lat);
    if (absLat > 66.5) return "Polar climate - very cold temperatures year-round";
    if (absLat > 60) return "Subarctic climate - cold winters, cool summers";
    if (absLat > 45) return "Continental climate - warm summers, cold winters";
    if (absLat > 23.5) return "Temperate climate - moderate seasonal variations";
    return "Tropical climate - warm temperatures year-round";
  }
  
  function setRandomLocation() {
    const randomLocation = famousLocations[Math.floor(Math.random() * famousLocations.length)];
    const latInput = document.getElementById('latitude') as HTMLInputElement;
    const lonInput = document.getElementById('longitude') as HTMLInputElement;
    if (latInput && lonInput) {
      latInput.value = randomLocation.lat.toString();
      lonInput.value = randomLocation.lon.toString();
    }
  }
  
  async function fetchEarthImagery() {
    const latInput = document.getElementById('latitude') as HTMLInputElement;
    const lonInput = document.getElementById('longitude') as HTMLInputElement;
    const container = document.getElementById('earth-content');
    const button = document.getElementById('fetch-earth-btn') as HTMLButtonElement;
    
    if (!latInput || !lonInput || !container || !button) return;
    
    const lat = latInput.value;
    const lon = lonInput.value;
    
    if (!lat || !lon) {
      container.innerHTML = `
        <div class="text-center py-8">
          <div class="text-4xl mb-2">üìç</div>
          <p class="text-gray-600 dark:text-gray-400">Please enter both latitude and longitude coordinates</p>
        </div>
      `;
      return;
    }
    
    // Show loading state
    button.disabled = true;
    button.textContent = 'üîÑ Loading...';
    
    try {
      // Since NASA API has CORS restrictions, we'll use an alternative approach
      // We'll use a tile-based approach with OpenStreetMap satellite imagery
      // or provide educational content about the location
      
      const date = new Date();
      date.setMonth(date.getMonth() - 6);
      const dateString = date.toISOString().split('T')[0];
      
      // Generate educational satellite imagery information
      const locationInfo = getLocationInfo(parseFloat(lat), parseFloat(lon));
      
      // Create a demonstration of what satellite imagery would show
      container.innerHTML = `
        <div class="space-y-4">
          <div class="relative group bg-gradient-to-br from-blue-900 via-green-800 to-brown-600 rounded-lg h-64 flex items-center justify-center text-white overflow-hidden">
            <!-- Simulated satellite view with location pin -->
            <div class="absolute inset-0 bg-gradient-to-br from-transparent via-blue-500/20 to-green-500/20"></div>
            <div class="absolute top-4 left-4 bg-black/50 rounded px-2 py-1 text-xs">
              üì° Satellite View Simulation
            </div>
            <div class="text-center z-10">
              <div class="w-8 h-8 bg-red-500 rounded-full flex items-center justify-center mx-auto mb-2 animate-pulse">
                üìç
              </div>
              <div class="text-lg font-semibold">${locationInfo.name}</div>
              <div class="text-sm opacity-80">${lat}¬∞, ${lon}¬∞</div>
            </div>
            <!-- Decorative elements to simulate satellite imagery -->
            <div class="absolute top-8 right-8 w-16 h-16 border-2 border-white/30 rounded-full"></div>
            <div class="absolute bottom-12 left-12 w-4 h-4 bg-white/40 rounded"></div>
            <div class="absolute bottom-20 right-16 w-6 h-6 bg-white/20 rounded-full"></div>
          </div>
          
          <div class="bg-gradient-to-r from-blue-50 to-green-50 dark:from-blue-900/20 dark:to-green-900/20 rounded-lg p-4">
            <div class="text-sm">
              <div class="font-medium mb-2 text-blue-800 dark:text-blue-300">üìç Location Information</div>
              <div class="space-y-2 text-gray-700 dark:text-gray-300">
                <div><strong>Location:</strong> ${locationInfo.name}</div>
                <div><strong>Coordinates:</strong> ${lat}¬∞N, ${lon}¬∞${lat.includes('-') ? 'S' : ''}${lon.includes('-') ? 'W' : 'E'}</div>
                <div><strong>Region:</strong> ${locationInfo.region}</div>
                <div><strong>Features:</strong> ${locationInfo.features}</div>
                <div><strong>Climate:</strong> ${locationInfo.climate}</div>
              </div>
            </div>
          </div>
          
          <div class="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-3">
            <div class="flex items-start space-x-2">
              <div class="text-yellow-600 dark:text-yellow-400 text-lg">üí°</div>
              <div class="text-sm text-yellow-800 dark:text-yellow-300">
                <div class="font-medium mb-1">About Satellite Imagery</div>
                <div>Real NASA satellite imagery requires server-side access due to API restrictions. This demonstration shows the type of location data and satellite view information that would be available.</div>
              </div>
            </div>
          </div>
          
          <div class="text-center space-x-2">
            <button 
              onclick="fetchEarthImagery()" 
              class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white text-sm rounded-md transition-colors duration-200"
            >
              üîÑ Try Another Location
            </button>
            <a 
              href="https://earthengine.google.com/timelapse/" 
              target="_blank" 
              rel="noopener noreferrer"
              class="inline-block px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white text-sm rounded-md transition-colors duration-200"
            >
              üåç View Real Satellite Imagery
            </a>
          </div>
        </div>
      `;
      button.disabled = false;
      button.textContent = 'üì° Get Satellite View';
    } catch (error) {
      console.error('Error fetching Earth imagery:', error);
      container.innerHTML = `
        <div class="text-center py-8">
          <div class="text-4xl mb-2">üåç</div>
          <p class="text-gray-600 dark:text-gray-400 mb-4">No satellite imagery available for these coordinates.</p>
          <p class="text-sm text-gray-500 dark:text-gray-500">Try coordinates like:</p>
          <div class="text-sm text-gray-600 dark:text-gray-400 mt-2 space-y-1">
            <div>‚Ä¢ Grand Canyon: 36.0986, -112.0978</div>
            <div>‚Ä¢ Mount Everest: 27.9881, 86.9250</div>
            <div>‚Ä¢ New York City: 40.7128, -74.0060</div>
          </div>
        </div>
      `;
      button.disabled = false;
      button.textContent = 'üì° Get Satellite View';
    }
  }
  
  // Add event listeners
  const fetchBtn = document.getElementById('fetch-earth-btn');
  const randomBtn = document.getElementById('random-location-btn');
  const latInput = document.getElementById('latitude');
  const lonInput = document.getElementById('longitude');
  
  if (fetchBtn) {
    fetchBtn.addEventListener('click', fetchEarthImagery);
  }
  if (randomBtn) {
    randomBtn.addEventListener('click', setRandomLocation);
  }
  
  // Allow Enter key to fetch imagery
  if (latInput) {
    latInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') fetchEarthImagery();
    });
  }
  if (lonInput) {
    lonInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') fetchEarthImagery();
    });
  }

  // Load a default location on page load
  window.addEventListener('load', () => {
    setTimeout(() => {
      setRandomLocation();
      fetchEarthImagery();
    }, 1000);
  });
</script>
