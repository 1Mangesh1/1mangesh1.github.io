---
// NASA Earth Imagery component
---

<div class="nasa-earth-container">
  <div class="bg-gradient-to-r from-green-50 to-teal-50 dark:from-green-900/20 dark:to-teal-900/20 rounded-lg p-6 border border-green-200 dark:border-green-800">
    <h3 class="font-semibold text-lg mb-4 text-green-900 dark:text-green-100 flex items-center">
      <span class="mr-2">üåç</span>
      Earth from Space
    </h3>
    
    <div class="mb-4 space-y-3">
      <div class="grid grid-cols-2 gap-2">
        <input 
          type="number" 
          id="latitude" 
          placeholder="Latitude" 
          step="0.000001"
          class="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 text-sm"
        />
        <input 
          type="number" 
          id="longitude" 
          placeholder="Longitude" 
          step="0.000001"
          class="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 text-sm"
        />
      </div>
      
      <div class="flex gap-2">
        <button 
          id="fetch-earth-btn" 
          class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white text-sm rounded-md transition-colors duration-200 flex-1"
        >
          üì° Get Satellite View
        </button>
        <button 
          id="random-location-btn" 
          class="px-3 py-2 bg-gray-600 hover:bg-gray-700 text-white text-sm rounded-md transition-colors duration-200"
        >
          üé≤ Random
        </button>
      </div>
      
      <div class="text-xs text-gray-600 dark:text-gray-400">
        Examples: New York (40.7128, -74.0060) ‚Ä¢ London (51.5074, -0.1278) ‚Ä¢ Tokyo (35.6762, 139.6503)
      </div>
    </div>
    
    <div id="earth-content" class="space-y-4">
      <div class="text-center py-8">
        <div class="text-4xl mb-2">üåç</div>
        <p class="text-gray-600 dark:text-gray-400">Enter coordinates to see Earth from space!</p>
      </div>
    </div>
  </div>
</div>

<script>
  const API_KEY = "ZHQlfyfHdYSYnzRjUaRhWHMgRRtWo66ourOBYChp";
  
  // Famous locations for random selection
  const famousLocations = [
    { name: "Grand Canyon", lat: 36.0986, lon: -112.0978 },
    { name: "Mount Everest", lat: 27.9881, lon: 86.9250 },
    { name: "New York City", lat: 40.7128, lon: -74.0060 },
    { name: "London", lat: 51.5074, lon: -0.1278 },
    { name: "Tokyo", lat: 35.6762, lon: 139.6503 },
    { name: "Sydney Opera House", lat: -33.8568, lon: 151.2153 },
    { name: "Sahara Desert", lat: 23.8061, lon: 11.2888 },
    { name: "Amazon Rainforest", lat: -3.4653, lon: -62.2159 },
    { name: "Niagara Falls", lat: 43.0799, lon: -79.0747 },
    { name: "Las Vegas", lat: 36.1699, lon: -115.1398 }
  ];
  
  function setRandomLocation() {
    const randomLocation = famousLocations[Math.floor(Math.random() * famousLocations.length)];
    const latInput = document.getElementById('latitude') as HTMLInputElement;
    const lonInput = document.getElementById('longitude') as HTMLInputElement;
    if (latInput && lonInput) {
      latInput.value = randomLocation.lat.toString();
      lonInput.value = randomLocation.lon.toString();
    }
  }
  
  async function fetchEarthImagery() {
    const latInput = document.getElementById('latitude') as HTMLInputElement;
    const lonInput = document.getElementById('longitude') as HTMLInputElement;
    const container = document.getElementById('earth-content');
    const button = document.getElementById('fetch-earth-btn') as HTMLButtonElement;
    
    if (!latInput || !lonInput || !container || !button) return;
    
    const lat = latInput.value;
    const lon = lonInput.value;
    
    if (!lat || !lon) {
      container.innerHTML = `
        <div class="text-center py-8">
          <div class="text-4xl mb-2">üìç</div>
          <p class="text-gray-600 dark:text-gray-400">Please enter both latitude and longitude coordinates</p>
        </div>
      `;
      return;
    }
    
    // Show loading state
    button.disabled = true;
    button.textContent = 'üîÑ Loading...';
    
    try {
      // Use a date from a few months ago for better image availability
      const date = new Date();
      date.setMonth(date.getMonth() - 6);
      const dateString = date.toISOString().split('T')[0];
      
      // Direct image URL approach to avoid CORS issues
      const imageUrl = `https://api.nasa.gov/planetary/earth/imagery?lon=${lon}&lat=${lat}&date=${dateString}&dim=0.4&api_key=${API_KEY}`;
      
      // Create image element to test if it loads
      const testImg = new Image();
      testImg.crossOrigin = "anonymous";
      
      testImg.onload = function() {
        container.innerHTML = `
          <div class="space-y-4">
            <div class="relative group">
              <img 
                src="${imageUrl}" 
                alt="Earth imagery from NASA"
                class="w-full h-64 object-cover rounded-lg shadow-lg group-hover:shadow-xl transition-shadow duration-300"
                loading="lazy"
                crossorigin="anonymous"
              />
              <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all duration-300 rounded-lg"></div>
            </div>
            
            <div class="bg-white/50 dark:bg-gray-800/50 rounded-lg p-3">
              <div class="text-sm">
                <div class="font-medium mb-1">üìç Location Details</div>
                <div class="text-gray-600 dark:text-gray-400 space-y-1">
                  <div>Latitude: ${lat}¬∞</div>
                  <div>Longitude: ${lon}¬∞</div>
                  <div>Date: ${dateString}</div>
                  <div>Resolution: 400m per pixel</div>
                </div>
              </div>
            </div>
            
            <div class="text-center">
              <button 
                onclick="fetchEarthImagery()" 
                class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white text-sm rounded-md transition-colors duration-200"
              >
                üîÑ Refresh Image
              </button>
            </div>
          </div>
        `;
        button.disabled = false;
        button.textContent = 'üì° Get Satellite View';
      };
      
      testImg.onerror = function() {
        throw new Error('No imagery available for this location');
      };
      
      testImg.src = imageUrl;
    } catch (error) {
      console.error('Error fetching Earth imagery:', error);
      container.innerHTML = `
        <div class="text-center py-8">
          <div class="text-4xl mb-2">üåç</div>
          <p class="text-gray-600 dark:text-gray-400 mb-4">No satellite imagery available for these coordinates.</p>
          <p class="text-sm text-gray-500 dark:text-gray-500">Try coordinates like:</p>
          <div class="text-sm text-gray-600 dark:text-gray-400 mt-2 space-y-1">
            <div>‚Ä¢ Grand Canyon: 36.0986, -112.0978</div>
            <div>‚Ä¢ Mount Everest: 27.9881, 86.9250</div>
            <div>‚Ä¢ New York City: 40.7128, -74.0060</div>
          </div>
        </div>
      `;
      button.disabled = false;
      button.textContent = 'üì° Get Satellite View';
    }
  }
  
  // Add event listeners
  const fetchBtn = document.getElementById('fetch-earth-btn');
  const randomBtn = document.getElementById('random-location-btn');
  const latInput = document.getElementById('latitude');
  const lonInput = document.getElementById('longitude');
  
  if (fetchBtn) {
    fetchBtn.addEventListener('click', fetchEarthImagery);
  }
  if (randomBtn) {
    randomBtn.addEventListener('click', setRandomLocation);
  }
  
  // Allow Enter key to fetch imagery
  if (latInput) {
    latInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') fetchEarthImagery();
    });
  }
  if (lonInput) {
    lonInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') fetchEarthImagery();
    });
  }

  // Load a default location on page load
  window.addEventListener('load', () => {
    setTimeout(() => {
      setRandomLocation();
      fetchEarthImagery();
    }, 1000);
  });
</script>
