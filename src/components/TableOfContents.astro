---
import NotificationBubble from './NotificationBubble.astro';

export interface Props {
  headings: Array<{
    depth: number;
    slug: string;
    text: string;
  }>;
}

const { headings } = Astro.props;

// Filter out h1 (title) and only show h2-h6
const tocHeadings = headings.filter(heading => heading.depth > 1 && heading.depth <= 4);
---

{tocHeadings.length > 0 && (
  <>
    <!-- Mobile TOC Toggle Button - Positioned to avoid nav conflicts -->
    <button
      id="mobile-toc-toggle"
      class="fixed top-20 right-4 z-50 md:hidden bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-2 shadow-lg hover:shadow-xl transition-all duration-200"
      aria-label="Toggle Table of Contents"
    >
      <svg class="w-5 h-5 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
      </svg>
    </button>

    <!-- Mobile TOC Overlay -->
    <div 
      id="mobile-toc-overlay"
      class="fixed inset-0 bg-black bg-opacity-50 z-40 md:hidden transition-opacity duration-300 opacity-0 pointer-events-none"
    ></div>

    <!-- Mobile TOC Sidebar -->
    <div 
      id="mobile-toc-sidebar"
      class="fixed top-0 right-0 h-full w-80 max-w-[85vw] bg-white dark:bg-gray-800 border-l border-gray-200 dark:border-gray-700 z-50 md:hidden transform transition-transform duration-300 translate-x-full overflow-y-auto"
    >
      <div class="p-4 border-b border-gray-200 dark:border-gray-700">
        <div class="flex items-center justify-between">
          <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 flex items-center">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
            </svg>
            Contents
          </h3>
          <button
            id="mobile-toc-close"
            class="p-1 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
            aria-label="Close Table of Contents"
          >
            <svg class="w-5 h-5 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
      </div>
      
      <nav class="p-4 space-y-2">
        {tocHeadings.map((heading) => (
          <a
            href={`#${heading.slug}`}
            class={`block text-sm text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 transition-colors toc-link`}
            data-heading={heading.slug}
            data-depth={heading.depth}
          >
            {heading.text}
          </a>
        ))}
      </nav>
    </div>

    <!-- Desktop Floating TOC -->
    <div 
      id="desktop-toc"
      class="hidden md:block fixed right-4 top-1/2 transform -translate-y-1/2 z-40 transition-all duration-300 opacity-30 hover:opacity-100"
    >
      <!-- TOC Toggle Button -->
      <button
        id="desktop-toc-toggle"
        class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-full p-2 shadow-lg hover:shadow-xl transition-all duration-200 mb-2"
        aria-label="Toggle Table of Contents"
      >
        <svg class="w-5 h-5 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
        </svg>
      </button>
      
      <!-- TOC Panel -->
      <div 
        id="desktop-toc-panel"
        class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-xl p-4 w-64 max-h-96 overflow-y-auto transform transition-all duration-300 origin-top-right scale-0 opacity-0"
      >
        <h3 class="text-sm font-semibold text-gray-900 dark:text-gray-100 mb-3 flex items-center">
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
          </svg>
          Contents
        </h3>
        
        <nav class="space-y-1">
          {tocHeadings.map((heading) => (
            <a
              href={`#${heading.slug}`}
              class={`block text-sm text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 transition-colors toc-link`}
              data-heading={heading.slug}
              data-depth={heading.depth}
            >
              {heading.text}
            </a>
          ))}
        </nav>
      </div>
    </div>

    <!-- TOC Notification for first-time users -->
    <NotificationBubble
      id="toc-notification"
      text="ðŸ’¡ Use the Table of Contents for quick navigation through this post!"
      position="top-right"
      duration={8000}
      type="info"
      dismissible={true}
      showArrow={true}
      targetElement="#mobile-toc-toggle"
    />
  </>
)}

<style>
  .toc-link.active {
    @apply text-blue-600 dark:text-blue-400 font-medium;
  }
  
  .toc-link.active::before {
    content: '';
    @apply absolute left-0 top-1/2 transform -translate-y-1/2 w-1 h-4 bg-blue-600 rounded-full;
  }
  
  .toc-link {
    @apply relative pl-4;
  }
  
  /* Adjust padding based on heading depth */
  .toc-link[data-depth="2"] {
    @apply pl-4 font-medium;
  }
  
  .toc-link[data-depth="3"] {
    @apply pl-6;
  }
  
  .toc-link[data-depth="4"] {
    @apply pl-8;
  }
  
  .toc-link[data-depth="5"] {
    @apply pl-10;
  }
  
  .toc-link[data-depth="6"] {
    @apply pl-12;
  }
</style>

<script>
  // Check if user has seen TOC notification before
  const tocNotificationSeen = localStorage.getItem('toc-notification-seen');
  
  // Mobile TOC functionality
  const mobileTocToggle = document.getElementById('mobile-toc-toggle');
  const mobileTocSidebar = document.getElementById('mobile-toc-sidebar');
  const mobileTocOverlay = document.getElementById('mobile-toc-overlay');
  const mobileTocClose = document.getElementById('mobile-toc-close');
  let isMobileOpen = false;
  
  if (mobileTocToggle && mobileTocSidebar && mobileTocOverlay && mobileTocClose) {
    // Show notification for first-time users
    if (!tocNotificationSeen && window.innerWidth < 768) {
      setTimeout(() => {
        if (window.showNotification) {
          window.showNotification('toc-notification');
          localStorage.setItem('toc-notification-seen', 'true');
        }
      }, 2000);
    }
    
    // Open mobile TOC
    mobileTocToggle.addEventListener('click', () => {
      isMobileOpen = true;
      mobileTocOverlay.classList.remove('opacity-0', 'pointer-events-none');
      mobileTocSidebar.classList.remove('translate-x-full');
      document.body.style.overflow = 'hidden';
    });
    
    // Close mobile TOC
    const closeMobileToc = () => {
      isMobileOpen = false;
      mobileTocOverlay.classList.add('opacity-0', 'pointer-events-none');
      mobileTocSidebar.classList.add('translate-x-full');
      document.body.style.overflow = '';
    };
    
    mobileTocClose.addEventListener('click', closeMobileToc);
    mobileTocOverlay.addEventListener('click', closeMobileToc);
    
    // Close on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && isMobileOpen) {
        closeMobileToc();
      }
    });
  }
  
  // Desktop TOC functionality
  const desktopTocToggle = document.getElementById('desktop-toc-toggle');
  const desktopTocPanel = document.getElementById('desktop-toc-panel');
  let isDesktopOpen = false;
  
  if (desktopTocToggle && desktopTocPanel) {
    // Show notification for first-time desktop users
    if (!tocNotificationSeen && window.innerWidth >= 768) {
      setTimeout(() => {
        if (window.showNotification) {
          window.showNotification('toc-notification');
          localStorage.setItem('toc-notification-seen', 'true');
        }
      }, 2000);
    }
    
    // Toggle desktop TOC panel
    desktopTocToggle.addEventListener('click', () => {
      isDesktopOpen = !isDesktopOpen;
      
      if (isDesktopOpen) {
        desktopTocPanel.classList.remove('scale-0', 'opacity-0');
        desktopTocPanel.classList.add('scale-100', 'opacity-100');
      } else {
        desktopTocPanel.classList.add('scale-0', 'opacity-0');
        desktopTocPanel.classList.remove('scale-100', 'opacity-100');
      }
    });
    
    // Close desktop TOC when clicking outside
    document.addEventListener('click', (e) => {
      const target = e.target as Element;
      if (isDesktopOpen && !desktopTocToggle.contains(target) && !desktopTocPanel.contains(target)) {
        isDesktopOpen = false;
        desktopTocPanel.classList.add('scale-0', 'opacity-0');
        desktopTocPanel.classList.remove('scale-100', 'opacity-100');
      }
    });
  }
  
  // Shared TOC link functionality
  const tocLinks = document.querySelectorAll('.toc-link');
  
  if (tocLinks.length > 0) {
    // Get all headings in the content
    const headings = Array.from(document.querySelectorAll('h2, h3, h4, h5, h6'))
      .filter(heading => heading.id);
    
    // Smooth scroll for TOC links
    tocLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('href')?.slice(1);
        const targetElement = document.getElementById(targetId || '');
        
        if (targetElement) {
          targetElement.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
          
          // Close TOC after navigation
          if (isMobileOpen) {
            isMobileOpen = false;
            mobileTocOverlay?.classList.add('opacity-0', 'pointer-events-none');
            mobileTocSidebar?.classList.add('translate-x-full');
            document.body.style.overflow = '';
          }
          
          if (isDesktopOpen) {
            isDesktopOpen = false;
            desktopTocPanel?.classList.add('scale-0', 'opacity-0');
            desktopTocPanel?.classList.remove('scale-100', 'opacity-100');
          }
        }
      });
    });
    
    // Highlight current section
    const updateActiveSection = () => {
      const scrollTop = window.scrollY;
      
      // Find current active heading
      let activeHeading = null;
      
      for (let i = headings.length - 1; i >= 0; i--) {
        const heading = headings[i] as HTMLElement;
        const headingTop = heading.offsetTop - 100;
        
        if (scrollTop >= headingTop) {
          activeHeading = heading;
          break;
        }
      }
      
      // Update active TOC link
      tocLinks.forEach(link => {
        link.classList.remove('active');
        const targetId = link.getAttribute('href')?.slice(1);
        
        if (activeHeading && targetId === activeHeading.id) {
          link.classList.add('active');
        }
      });
    };
    
    // Throttled scroll listener for performance
    let ticking = false;
    const handleScroll = () => {
      if (!ticking) {
        requestAnimationFrame(() => {
          updateActiveSection();
          ticking = false;
        });
        ticking = true;
      }
    };
    
    window.addEventListener('scroll', handleScroll);
    updateActiveSection();
  }
</script> 