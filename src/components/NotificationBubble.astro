---
export interface Props {
  id: string;
  text: string;
  position?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left' | 'center';
  duration?: number;
  type?: 'info' | 'success' | 'warning' | 'error';
  dismissible?: boolean;
  showArrow?: boolean;
  targetElement?: string;
}

const { 
  id, 
  text, 
  position = 'top-right', 
  duration = 5000, 
  type = 'info',
  dismissible = true,
  showArrow = false,
  targetElement
} = Astro.props;

const positionClasses = {
  'top-right': 'top-4 right-4',
  'top-left': 'top-4 left-4',
  'bottom-right': 'bottom-4 right-4',
  'bottom-left': 'bottom-4 left-4',
  'center': 'top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2'
};

const typeClasses = {
  'info': 'bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800 text-blue-800 dark:text-blue-200',
  'success': 'bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800 text-green-800 dark:text-green-200',
  'warning': 'bg-yellow-50 dark:bg-yellow-900/20 border-yellow-200 dark:border-yellow-800 text-yellow-800 dark:text-yellow-200',
  'error': 'bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-800 text-red-800 dark:text-red-200'
};

const typeIcons = {
  'info': `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
  </svg>`,
  'success': `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
  </svg>`,
  'warning': `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
  </svg>`,
  'error': `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
  </svg>`
};
---

<div 
  id={id}
  class={`fixed ${positionClasses[position]} z-50 max-w-sm w-full bg-white dark:bg-gray-800 border rounded-lg shadow-lg p-4 ${typeClasses[type]} transform transition-all duration-300 opacity-0 scale-95 pointer-events-none`}
  data-duration={duration}
  data-dismissible={dismissible}
  data-target-element={targetElement}
>
  <div class="flex items-start space-x-3">
    <div class="flex-shrink-0 mt-0.5">
      <Fragment set:html={typeIcons[type]} />
    </div>
    <div class="flex-1 min-w-0">
      <p class="text-sm font-medium">{text}</p>
    </div>
    {dismissible && (
      <button 
        class="flex-shrink-0 ml-2 p-1 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
        onclick={`dismissNotification('${id}')`}
        aria-label="Dismiss notification"
      >
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    )}
  </div>
  {showArrow && (
    <div class="absolute w-3 h-3 bg-white dark:bg-gray-800 border-t border-l border-gray-200 dark:border-gray-700 transform rotate-45 -top-1.5 left-6"></div>
  )}
</div>

<script>
  // Global notification management
  declare global {
    interface Window {
      notificationQueue: string[];
      showNotification: (id: string, options?: any) => void;
      dismissNotification: (id: string) => void;
    }
  }
  
  window.notificationQueue = window.notificationQueue || [];
  
  function showNotification(id: string, options: any = {}) {
    const notification = document.getElementById(id);
    if (!notification) return;
    
    // Set default options
    const config = {
      duration: parseInt(notification.dataset.duration || '5000'),
      dismissible: notification.dataset.dismissible !== 'false',
      targetElement: notification.dataset.targetElement,
      ...options
    };
    
    // Show notification
    notification.classList.remove('opacity-0', 'scale-95', 'pointer-events-none');
    notification.classList.add('opacity-100', 'scale-100');
    
    // Position relative to target element if specified
    if (config.targetElement) {
      const target = document.querySelector(config.targetElement);
      if (target) {
        const rect = target.getBoundingClientRect();
        notification.style.top = `${rect.bottom + 10}px`;
        notification.style.left = `${rect.left}px`;
        notification.style.position = 'fixed';
      }
    }
    
    // Auto-dismiss after duration
    if (config.duration > 0) {
      setTimeout(() => {
        dismissNotification(id);
      }, config.duration);
    }
    
    // Add to queue for management
    window.notificationQueue.push(id);
  }
  
  function dismissNotification(id: string) {
    const notification = document.getElementById(id);
    if (!notification) return;
    
    notification.classList.add('opacity-0', 'scale-95', 'pointer-events-none');
    notification.classList.remove('opacity-100', 'scale-100');
    
    // Remove from queue
    const index = window.notificationQueue.indexOf(id);
    if (index > -1) {
      window.notificationQueue.splice(index, 1);
    }
    
    // Remove from DOM after animation
    setTimeout(() => {
      notification.remove();
    }, 300);
  }
  
  // Make functions globally available
  window.showNotification = showNotification;
  window.dismissNotification = dismissNotification;
  
  // Auto-show notifications with data-auto-show attribute
  document.addEventListener('DOMContentLoaded', () => {
    const autoShowNotifications = document.querySelectorAll('[data-auto-show="true"]');
    autoShowNotifications.forEach(notification => {
      const id = notification.id;
      if (id) {
        showNotification(id);
      }
    });
  });
</script> 