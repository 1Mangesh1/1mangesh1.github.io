---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import { calculateReadingTime, formatReadingTime } from '../../utils/reading-time';
import { getRelatedPosts } from '../../utils/related-posts';
import SocialShare from '../../components/SocialShare.astro';
import TableOfContents from '../../components/TableOfContents.astro';
import { siteConfig } from '../../config/site';

export async function getStaticPaths() {
  const blogPosts = await getCollection('blog');
  
  return blogPosts.map((post) => {
    return {
      params: { slug: post.slug },
      props: { post }
    };
  });
}

const { post } = Astro.props;
const { Content, headings } = await post.render();

// Get all posts for related posts calculation
const allPosts = await getCollection('blog');
const relatedPosts = getRelatedPosts(post, allPosts, 3);

// Calculate reading time
const readingTime = calculateReadingTime(post.body);

// Current post URL for sharing
const currentUrl = `${siteConfig.url}/blog/${post.slug}`;

const formatDate = (date: Date) => {
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }).format(date);
};
---

<Layout title={`${post.data.title} - Mangesh's Blog`} description={post.data.description}>
  <article class="max-w-4xl mx-auto px-4 py-12">
        <header class="mb-8">
          <nav class="text-sm text-gray-600 dark:text-gray-400 mb-4">
            <a href="/blog" class="hover:text-blue-600 dark:hover:text-blue-400">Blog</a>
            <span class="mx-2">/</span>
            <span class="text-gray-900 dark:text-gray-100">{post.data.title}</span>
          </nav>
          
          <h1 class="text-4xl font-bold mb-4">{post.data.title}</h1>
          
          <div class="flex items-center text-sm text-gray-600 dark:text-gray-400 mb-4">
            <time datetime={post.data.pubDate.toISOString()}>
              {formatDate(post.data.pubDate)}
            </time>
            <span class="mx-2">â€¢</span>
            <span>{formatReadingTime(readingTime)}</span>
          </div>
          
          {post.data.description && (
            <p class="text-lg text-gray-700 dark:text-gray-300 mb-6">
              {post.data.description}
            </p>
          )}
          
          {post.data.tags && (
            <div class="flex flex-wrap gap-2 mb-8">
              {post.data.tags.map((tag) => (
                <a
                  href={`/blog/tags/${tag.toLowerCase().replace(/\s+/g, '-')}`}
                  class="px-3 py-1 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 text-sm rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
                >
                  {tag}
                </a>
              ))}
            </div>
          )}
        </header>

        <!-- Social Share -->
        <div class="mb-8">
          <SocialShare 
            title={post.data.title} 
            url={currentUrl} 
            description={post.data.description} 
          />
        </div>

        <div class="prose prose-lg dark:prose-invert max-w-none">
          <Content />
        </div>

    {relatedPosts.length > 0 && (
      <section class="mt-16 pt-8 border-t border-gray-200 dark:border-gray-700">
        <h2 class="text-2xl font-bold mb-6">Related Posts</h2>
        <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {relatedPosts.map((relatedPost) => (
            <article class="bg-gray-50 dark:bg-gray-800 p-6 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors">
              <h3 class="text-lg font-semibold mb-2">
                <a 
                  href={`/blog/${relatedPost.slug}`}
                  class="hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
                >
                  {relatedPost.data.title}
                </a>
              </h3>
              
              <time class="text-sm text-gray-600 dark:text-gray-400 mb-3 block">
                {formatDate(relatedPost.data.pubDate)}
              </time>
              
              {relatedPost.data.description && (
                <p class="text-sm text-gray-700 dark:text-gray-300 mb-4 line-clamp-3">
                  {relatedPost.data.description}
                </p>
              )}
              
              {relatedPost.data.tags && (
                <div class="flex flex-wrap gap-1">
                  {relatedPost.data.tags.slice(0, 3).map((tag) => (
                    <span class="px-2 py-1 bg-gray-200 dark:bg-gray-700 text-gray-600 dark:text-gray-400 text-xs rounded">
                      {tag}
                    </span>
                  ))}
                  {relatedPost.data.tags.length > 3 && (
                    <span class="px-2 py-1 text-gray-500 dark:text-gray-500 text-xs">
                      +{relatedPost.data.tags.length - 3}
                    </span>
                  )}
                </div>
              )}
            </article>
          ))}
        </div>
      </section>
    )}

    <div class="mt-12 pt-8 border-t border-gray-200 dark:border-gray-700">
      <a 
        href="/blog" 
        class="inline-flex items-center text-blue-600 dark:text-blue-400 hover:underline"
      >
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
        Back to blog
      </a>
    </div>
  </article>

  <!-- Floating Table of Contents -->
  <TableOfContents headings={headings} />
</Layout> 